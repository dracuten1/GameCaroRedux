{"version":3,"sources":["hoc/Layout/Layout.jsx","contexts/square-context.js","components/game-square/square.jsx","components/game-board/board.jsx","components/history-board/history-board.jsx","containers/GameCaro/GameCaro.jsx","actions/GameActions.js","actions/ActionTypes.js","App.js","serviceWorker.js","utility/squareObj.js","utility/gameChecker.js","reducers/GameReducers.js","index.js"],"names":["layout","props","children","className","squareContext","React","createContext","onSquareClick","square","value","Square","state","this","isSelected","squareObj","style","mark","Consumer","context","type","onClick","Component","Board","renderSquare","key","renderRow","squareRow","map","player","squares","historyBoard","arr","arrange","i","step","current","backToStep","GameCaro","init","initGameRefactor","handleClick","selectedSquare","setStep","render","arrangeAsend","boardSquares","win","history","currentStep","Provider","length","setState","connect","grc","dispatch","payLoads","payLoadsdata","App","hello","Boolean","window","location","hostname","match","SquareValue","j","equal","orther","isSameValue","isComponentValue","Checker","check","squareValue","checkSubDiagonal","checkCol","checkRow","checkMainDiagonal","twoHeadBlock","count","x","y","getBlankBoard","Array","fill","initialState","reducer","action","counter","newState","squaresBoard","squareM","s","select","result","newBoard","sr1","square1","sq","forEach","r","newHis","slice","newBoardHistory","lo","boardRow","newSquare","rootReducer","combineReducers","GameReducer","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sYASeA,G,MANA,SAAAC,GAAU,IACbC,EAAaD,EAAbC,SACR,OAAQ,yBAAKC,UAAU,UAClBD,KCEME,G,MANOC,IAAMC,cAAc,CAEtCC,cAAe,SAACC,KAChBC,MAAO,QCoCIC,E,YApCX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDU,MAAQ,GAFE,E,sEAMV,MAGoCC,KAAKX,MAAtCQ,EAHH,EAGGA,MAAOI,EAHV,EAGUA,WAAYC,EAHtB,EAGsBA,UACrBC,EAAQF,EAAa,CACvB,gBAAmB,SACnB,KACAG,EAAO,GAOX,OANc,IAAVP,EACAO,EAAO,IACU,IAAVP,IACPO,EAAO,KAIP,kBAAC,EAAcC,SAAf,MACK,SAAAC,GAAO,OACJ,4BACIC,KAAK,SACLhB,UAAU,SACVY,MAAOA,EACPK,QAAS,kBAAMF,EAAQX,cAAcO,KAEpCE,U,GA9BJX,IAAMgB,WCqCZC,G,iNAlCXC,aAAe,SAACf,GACZ,OAAO,kBAAC,EAAD,CACHK,WAAYL,EAAOK,WACnBC,UAAWN,EACXC,MAAOD,EAAOC,MAAOe,IAAKhB,EAAOgB,O,EAIzCC,UAAY,SAACC,GACT,OACI,yBAAKvB,UAAU,YAAYqB,IAAG,aAAQE,EAAU,GAAGF,MAC/C,6BACKE,EAAUC,KAAI,SAAAnB,GAAM,OAAI,EAAKe,aAAaf,OAE/C,+B,wEAKF,IAAD,SACuBI,KAAKX,MAAzB2B,EADH,EACGA,OAAQC,EADX,EACWA,QAChB,OACI,6BAEI,yBAAK1B,UAAU,SACX,4BAAgB,IAAXyB,EAAe,IAAM,MAE9B,6BACKC,EAAQF,KAAI,SAAAD,GAAS,OAAI,EAAKD,UAAUC,Y,GA9BzCrB,IAAMgB,Y,eCwBXS,G,MA1BM,SAAA7B,GACjB,IAAI8B,EAAM,GACV,GAAK9B,EAAM+B,QAKP,IAAK,IAAIC,EAAI,EAAGA,GAAKhC,EAAMiC,KAAMD,GAAK,EAClCF,EAAG,sBAAOA,GAAP,CAAYE,SALnB,IAAK,IAAIA,EAAIhC,EAAMiC,KAAMD,GAAI,EAAGA,GAAK,EACjCF,EAAG,sBAAOA,GAAP,CAAYE,IASvB,OAAOF,EAAIJ,KAAI,SAACO,GACZ,IAAMnB,EAAQd,EAAMkC,UAAYD,EAAO,CACnC,gBAAmB,SACnB,KACJ,OAAO,wBAAIV,IAAKU,GACZ,4BAAQ/B,UAAU,SAASgB,KAAK,SAASJ,MAAOA,EAAOK,QAAS,kBAAMnB,EAAMmC,WAAWF,KAAvF,WAAuGA,SCb7GG,E,YACF,WAAYpC,GAAQ,IAAD,8BACf,4CAAMA,KAMVqC,KAAO,WAIH,EAAKrC,MAAMsC,oBAXI,EAqBnBC,YAAc,SAAChC,GAqCX,EAAKP,MAAMwC,eAAejC,IA1DX,EA6DnB4B,WAAa,SAACF,GA6BV,EAAKjC,MAAMyC,QAAQR,IA1FJ,EA2GnBS,OAAS,WAAO,IACJC,EAAiB,EAAKjC,MAAtBiC,aADG,EAEiD,EAAK3C,MAAzD4C,EAFG,EAEHA,aAAcjB,EAFX,EAEWA,OAAQkB,EAFnB,EAEmBA,IAAKC,EAFxB,EAEwBA,QAASC,EAFjC,EAEiCA,YAC5C,OACI,yBAAK7C,UAAU,QACV2C,EAAM,6BACH,qDAAsC,IAAXlB,EAAe,IAAM,MAE9C,KAEN,4BAAQT,KAAK,SAASC,QAAS,EAAKkB,MAApC,cACA,kBAAC,EAAcW,SAAf,CAAwBxC,MACpB,CACIA,MAAO,EACPF,cAAe,SAACC,GAAD,OAAY,EAAKgC,YAAYhC,MAGhD,kBAAC,EAAD,CAAOqB,QAASgB,EACZC,IAAKA,EACLlB,OAAQA,MAIJ,IAARkB,EACI,4BACI,kBAAC,EAAD,CAAcX,QAASa,EAAad,KAAMa,EAAQG,OAAQlB,QAASY,EAAcR,WAAY,SAACF,GAAD,OAAU,EAAKE,WAAWF,OACnH,KAQhB,4BACI,4BACI,4BAAQf,KAAK,SAASC,QAAS,kBAAM,EAAK+B,SAAS,CAAEP,cAAc,MAAnE,eACA,4BAAQzB,KAAK,SAASC,QAAS,kBAAM,EAAK+B,SAAS,CAAEP,cAAc,MAAnE,oBA9IhB,EAAKjC,MAAQ,CACTiC,cAAc,GAHH,E,2BADAvB,aA0KR+B,eAjBS,SAAAzC,GACpB,MAAO,CACHkC,aAAclC,EAAM0C,IAAIR,aACxBjB,OAAQjB,EAAM0C,IAAIzB,OAClBkB,IAAKnC,EAAM0C,IAAIP,IACfC,QAASpC,EAAM0C,IAAIN,YAIA,SAAAO,GACvB,MAAO,CACHf,iBAAkB,kBAAMe,ECjKrB,CACHnC,KCViB,ODWjBoC,SAAUC,IAHM,IAACA,GDmKjBf,eAAgB,SAACjC,GAAD,OAAY8C,ECzKzB,CACHnC,KCJsB,gBDKtBX,ODuKmEA,KACnEkC,QAAS,SAACR,GAAD,OAAUoB,EC7JhB,CACHnC,KCdgB,WDehBe,KD2JmDA,QAI5CkB,CAA6Cf,GG7J7CoB,G,iNAbbC,MAAQ,a,wEAKN,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,W,GARUrC,cCKEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCyBSC,E,WAhCX,WAAYvD,EAAOe,EAAKS,EAAGgC,GAAI,IAAD,gCAV9BxD,MAAQ,EAUsB,KAR9Be,IAAM,EAQwB,KAN9BS,EAAI,EAM0B,KAJ9BgC,EAAI,EAI0B,KAF9BpD,YAAW,EAEmB,KAW9BqD,MAAQ,SAACC,GACL,OAAIA,EAAO3C,MAAQ,EAAKA,KAZE,KAkB9B4C,YAAc,SAACD,GACX,OAAIA,EAAO1D,QAAU,EAAKA,OAnBA,KAyB9B4D,iBAAmB,SAACF,GAChB,OAAIA,EAAO1D,QAAU,EAAKA,OAA0B,IAAjB0D,EAAO1D,OAzB1CG,KAAKH,MAAQA,EACbG,KAAKY,IAAMA,EACXZ,KAAKqB,EAAIA,EACTrB,KAAKqD,EAAIA,E,qDAITrD,KAAKC,YAAW,M,KClBlByD,E,kCAAAA,EACKC,MAAQ,SAACC,EAAa3C,GACzB,OAFFyC,EAEWG,iBAAiBD,EAAa3C,GAASqB,OAAS,EAF3DoB,EAGkBG,iBAAiBD,EAAa3C,GAHhDyC,EAKWI,SAASF,EAAa3C,GAASqB,OAAS,EALnDoB,EAMkBI,SAASF,EAAa3C,GANxCyC,EAQWK,SAASH,EAAa3C,GAASqB,OAAS,EARnDoB,EASkBK,SAASH,EAAa3C,GATxCyC,EAWWM,kBAAkBJ,EAAa3C,GAASqB,OAAS,EAX5DoB,EAYkBM,kBAAkBJ,EAAa3C,GAExC,IAdTyC,EAiBKI,SAAW,SAACF,EAAa3C,GAM5B,IAJA,IAAIgD,GAAe,EACfC,EAAQ,EACRC,EAAIP,EAAYvC,EAAI,EACpBF,EAAM,GACHgD,EAAI,IAAI,CACX,IAAIP,EAAYJ,YAAYvC,EAAQkD,GAAGP,EAAYP,IAI5C,CAEqC,IAApCpC,EAAQkD,GAAGP,EAAYP,GAAGxD,QAC1BoE,GAAe,GAGnB,MATAC,GAAO,EACPC,GAAG,EACHhD,EAAG,sBAAOA,GAAP,CAAYF,EAAQkD,GAAGP,EAAYP,KAW9C,IADAc,EAAIP,EAAYvC,EAAI,EACb8C,GAAK,GAAG,CACX,IAAMtE,EAAQoB,EAAQkD,GAAGP,EAAYP,GACrC,IAAIO,EAAYJ,YAAY3D,GAIrB,CAGCoE,EADgB,IAAhBpE,EAAMA,QACSoE,IAAgB,GAKnC,MAXAC,GAAO,EACPC,GAAG,EACHhD,EAAG,sBAAOA,GAAP,CAAYtB,IAavB,OAAQqE,GAAS,IAAOD,EAAe9C,EAAM,IAxD/CuC,EA2DKK,SAAW,SAACH,EAAa3C,GAM5B,IAJA,IAAIgD,GAAe,EACfC,EAAQ,EACRC,EAAIP,EAAYP,EAAI,EACpBlC,EAAM,GACHgD,EAAI,IAAI,CAEX,IAAMtE,EAAQoB,EAAQ2C,EAAYvC,GAAG8C,GACrC,IAAIP,EAAYJ,YAAY3D,GAIrB,CAEiB,IAAhBA,EAAMA,QACNoE,GAAe,GAGnB,MATAC,GAAO,EACPC,GAAG,EACHhD,EAAG,sBAAOA,GAAP,CAAYtB,IAYvB,IADAsE,EAAIP,EAAYP,EAAI,EACbc,GAAK,GAAG,CAGX,IAAMtE,EAAQoB,EAAQ2C,EAAYvC,GAAG8C,GACrC,IAAIP,EAAYJ,YAAY3D,GAIrB,CAGCoE,EADgB,IAAhBpE,EAAMA,QACSoE,IAAgB,GAKnC,MAXAC,GAAO,EACPC,GAAG,EACHhD,EAAG,sBAAOA,GAAP,CAAYtB,IAcvB,OAAQqE,GAAS,IAAOD,EAAe9C,EAAM,IAxG/CuC,EA2GKM,kBAAoB,SAACJ,EAAa3C,GAMrC,IALA,IAAIgD,GAAe,EACfC,EAAQ,EACRC,EAAIP,EAAYvC,EAAI,EACpB+C,EAAIR,EAAYP,EAAI,EACpBlC,EAAM,GACHgD,EAAI,IAAMC,EAAI,IAAI,CAErB,IAAMvE,EAAQoB,EAAQkD,GAAGC,GACzB,IAAIR,EAAYJ,YAAY3D,GAKrB,CAEiB,IAAhBA,EAAMA,QACNoE,GAAe,GAGnB,MAVAC,GAAS,EACTC,GAAG,EACHC,GAAG,EACHjD,EAAG,sBAAOA,GAAP,CAAYtB,IAYvB,IAFAsE,EAAIP,EAAYvC,EAAI,EACpB+C,EAAIR,EAAYP,EAAI,EACbc,GAAK,GAAKC,GAAK,GAAG,CAErB,IAAMvE,EAAQoB,EAAQkD,GAAGC,GACzB,IAAIR,EAAYJ,YAAY3D,GAKrB,CAGCoE,EADgB,IAAhBpE,EAAMA,QACSoE,IAAgB,GAKnC,MAZAC,GAAS,EACTC,GAAG,EACHC,GAAG,EACHjD,EAAG,sBAAOA,GAAP,CAAYtB,IAcvB,OAAQqE,GAAS,IAAOD,EAAe9C,EAAM,IAzJ/CuC,EA4JKG,iBAAmB,SAACD,EAAa3C,GAMpC,IALA,IAAIgD,GAAe,EACfC,EAAQ,EACRC,EAAIP,EAAYvC,EAAI,EACpB+C,EAAIR,EAAYP,EAAI,EACpBlC,EAAM,GACHgD,EAAI,IAAMC,GAAK,GAAG,CACrB,IAAMvE,EAAQoB,EAAQkD,GAAGC,GACzB,IAAIR,EAAYJ,YAAY3D,GAKrB,CAGCoE,EADgB,IAAhBpE,EAAMA,MAMV,MAZAqE,GAAS,EACTC,GAAG,EACHC,GAAG,EACHjD,EAAG,sBAAOA,GAAP,CAAYtB,IAcvB,IAFAsE,EAAIP,EAAYvC,EAAI,EACpB+C,EAAIR,EAAYP,EAAI,EACbc,GAAK,GAAKC,EAAI,IAAI,CACrB,IAAMvE,EAAQoB,EAAQkD,GAAGC,GACzB,IAAIR,EAAYJ,YAAY3D,GAKrB,CAGCoE,EADgB,IAAhBpE,EAAMA,QACSoE,IAAgB,GAKnC,MAZAC,GAAS,EACTC,GAAG,EACHC,GAAG,EACHjD,EAAG,sBAAOA,GAAP,CAAYtB,IAcvB,OAAQqE,GAAS,IAAOD,EAAe9C,EAAM,IAGtCuC,Q,yjBCzMf,IAAMW,EAAgB,WAElB,IADA,IAAMlD,EAAM,IAAImD,MAAM,IAAIC,KAAK,GACtBlD,EAAI,EAAGA,EAAIF,EAAImB,OAAQjB,GAAK,EAAG,CACpCF,EAAIE,GAAK,IAAIiD,MAAM,IACnB,IAAK,IAAIjB,EAAI,EAAGA,EAAIlC,EAAIE,GAAGiB,OAAQe,GAAK,EACpClC,EAAIE,GAAGgC,GAAK,IAAID,EAAY,EAAO,GAAJ/B,EAAS,EAAIgC,EAAGhC,EAAGgC,GAG1D,OAAOlC,GAGLqD,EAAe,CACjBvC,aAAcoC,IACdrD,OAAQ,EACRkB,KAAK,EACLC,QAAS,GACTC,YAAa,GAiIFqC,EA/HC,WAAmC,IAAlC1E,EAAiC,uDAAzByE,EAAcE,EAAW,uCAC9C,OAAQA,EAAOnE,MAEX,ILvBmB,cKwBf,OAAO,EAAP,GACOR,EADP,CAEI4E,QAAS5E,EAAM4E,QAAU,IAEjC,IL9BsB,gBK8BY,IACtB1C,EAAiBlC,EAAjBkC,aACJ2C,EAAQ,KAAQ7E,GACZH,EAAW8E,EAAX9E,OACFiF,EAAe5C,EAAalB,KAAI,SAACD,GAuDnC,OAtDAA,EAAUC,KAAI,SAAA+D,GACV,IAAMC,EAAID,EAEV,GADAC,EAAE9E,YAAa,EACX6E,EAAQxB,MAAM1D,IAEE,IAAZmF,EAAElF,MAAa,CAAC,IACRmB,EAAiCjB,EAAjCiB,OAAQoB,EAAyBrC,EAAzBqC,YAAaD,EAAYpC,EAAZoC,QAC7B4C,EAAElF,MAAQmB,EACV+D,EAAEC,SAEF,IAAMC,EAASvB,EAAQC,MAAM/D,EAAQqC,GAErC,GAAIgD,EAAO3C,OAAS,EAAG,CACnB,IAAM4C,EAAWjD,EAAalB,KAAI,SAAAoE,GAW9B,OAVAA,EAAIpE,KAAI,SAAAqE,GACJ,IAAMC,EAAKD,EAOX,OANAC,EAAGpF,YAAa,EAChBgF,EAAOK,SAAQ,SAAAC,GACPF,EAAG/B,MAAMiC,IACTF,EAAGL,YAGJK,KAEJF,KAGXP,EAAQ,KACDA,EADC,CAEJ1C,KAAK,EACLD,aAAciD,IAKtB,IAAIM,EAAS,GAETA,EADApD,EAAcD,EAAQG,OACbH,EAAQsD,MAAM,EAAGrD,GAEpB,YAAOD,GAEjByC,EAAQ,KACDA,EADC,CAEJzC,QAAQ,GAAD,mBAAMqD,GAAN,CAAc,CACjBvC,SAAUrD,EAAOgB,IACjBI,YAEJA,OAAmB,IAAXA,EAAe,EAAI,EAC3BoB,YAAaA,EAAc,IAIvC,OAAO2C,KAEJjE,KAMX,OAJA8D,EAAQ,KACDA,EADC,CAEJ3C,aAAc4C,IAKtB,ILjGiB,OKkGb,IAAM5C,EAAeoC,IACrB,OAAO,EAAP,GACOtE,EADP,CAEIkC,eACAjB,OAAQ,EACRkB,KAAK,EACLC,QAAS,KAGjB,ILzGgB,WKyGY,IAAD,aAIvB,IAFA,IAAMuD,EAAkBrB,IAChBlC,EAAYpC,EAAZoC,QAHe,WAIdd,GACL,IAAMsE,EAAKxD,EAAQd,GAAG4B,SACtByC,EAAgB3E,KAAI,SAAA6E,GAUhB,OATAA,EAAS7E,KAAI,SAAAnB,GACT,IAAMiG,EAAYjG,EAMlB,OALAiG,EAAU5F,YAAa,EACnB4F,EAAUjF,MAAQ+E,IAClBE,EAAUhG,MAAQsC,EAAQd,GAAGL,OAC7B6E,EAAUb,UAEPa,KAEJD,MAZNvE,EAAI,EAAGA,EAAIqD,EAAOpD,KAAMD,GAAK,EAAI,EAAjCA,GAgBT,IAAIL,EAAS,EASb,OARoB,IAAhB0D,EAAOpD,OACPN,EAA6C,IAApCmB,EAAQuC,EAAOpD,KAAO,GAAGN,OAAe,EAAI,GAOnD,CAAN,OACOjB,EADP,CAEIkC,aAAcyD,EACd1E,SACAoB,YAAasC,EAAOpD,QAjCD,qCAoC3B,QACI,OAAOvB,ICtIb+F,EAAcC,YAAgB,CAChCtD,IAAKuD,IAEHC,EAAQC,YAAYJ,GAE1BK,IAASpE,OAAO,kBAAC,IAAD,CAAUkE,MAAOA,GAAO,kBAAC,EAAD,OAAoBG,SAASC,eAAe,SJgH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.685875ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Layout.css';\r\n\r\nconst layout = props => {\r\n    const { children } = props;\r\n    return (<div className='layout'>\r\n        {children}\r\n    </div>)\r\n}\r\nexport default layout;","import React from 'react';\r\n\r\nconst squareContext = React.createContext({\r\n    // eslint-disable-next-line no-unused-vars\r\n    onSquareClick: (square) => { },\r\n    value: null\r\n});\r\n\r\nexport default squareContext;","import React from 'react';\r\nimport './square.css';\r\nimport SquareContext from '../../contexts/square-context';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.value)\r\n        // console.log(this.props.squareObj);\r\n        const { value, isSelected, squareObj } = this.props;\r\n        const style = isSelected ? {\r\n            'backgroundColor': 'green'\r\n        } : null;\r\n        let mark = '';\r\n        if (value === 1) {\r\n            mark = 'X';\r\n        } else if (value === 2) {\r\n            mark = 'O';\r\n        }\r\n\r\n        return (\r\n            <SquareContext.Consumer>\r\n                {context =>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"square\"\r\n                        style={style}\r\n                        onClick={() => context.onSquareClick(squareObj)}\r\n                    >\r\n                        {mark}\r\n                    </button>\r\n                }\r\n            </SquareContext.Consumer>\r\n        );\r\n    }\r\n}\r\nexport default Square;","import React from 'react';\r\nimport Square from '../game-square/square';\r\nimport './board.css';\r\n\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare = (square) => {\r\n        return <Square\r\n            isSelected={square.isSelected}\r\n            squareObj={square}\r\n            value={square.value} key={square.key}\r\n        />;\r\n    }\r\n\r\n    renderRow = (squareRow) => {\r\n        return (\r\n            <div className='board-row' key={`row${squareRow[0].key}`}>\r\n                <div>\r\n                    {squareRow.map(square => this.renderSquare(square))}\r\n                </div>\r\n                <br />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { player, squares } = this.props;\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"board\">\r\n                    <h1>{player === 1 ? 'X' : 'O'}</h1>\r\n                </div>\r\n                <div>\r\n                    {squares.map(squareRow => this.renderRow(squareRow))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Board;","import React from 'react';\r\nimport './history-board.css';\r\n\r\nconst historyBoard = props => {\r\n    let arr = [];\r\n    if (!props.arrange) {\r\n        for (let i = props.step; i >=0; i -= 1) {\r\n            arr = [...arr, i];\r\n        }\r\n    }else{\r\n        for (let i = 0; i <= props.step; i += 1) {\r\n            arr = [...arr, i];\r\n        }\r\n    }\r\n    \r\n    // console.log(arr);\r\n    return arr.map((step) => {\r\n        const style = props.current === step ? {\r\n            'backgroundColor': 'green'\r\n        } : null;\r\n        return <li key={step}>\r\n            <button className=\"button\" type=\"button\" style={style} onClick={() => props.backToStep(step)}>Jump to {step}</button>\r\n        </li>\r\n    }\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default historyBoard;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Board from '../../components/game-board/board';\r\nimport './GameCaro.css';\r\nimport SquareContext from '../../contexts/square-context';\r\nimport HistoryBoard from '../../components/history-board/history-board';\r\nimport * as actionCreators from '../../actions/GameActions';\r\n\r\nclass GameCaro extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrangeAsend: true,\r\n        }\r\n    }\r\n\r\n    init = () => {\r\n        // const boardSquares = this.getBlankBoard();\r\n        // console.log(boardSquares);\r\n        // eslint-disable-next-line react/destructuring-assignment\r\n        this.props.initGameRefactor();\r\n\r\n        // this.setState({\r\n        //     boardSquares,\r\n        //     player: 1,\r\n        //     win: false,\r\n        //     history: []\r\n        // });\r\n    }\r\n\r\n    handleClick = (square) => {\r\n        // const { boardSquares } = this.state;\r\n        // const squaresBoard = boardSquares.map((squareRow) => {\r\n        //     squareRow.map(squareM => {\r\n        //         const s = squareM;\r\n        //         s.isSelected = false;\r\n        //         if (squareM.equal(square)) {\r\n        //             // console.log('map', squareM);\r\n        //             if (s.value === 0) {\r\n        //                 const { player, currentStep, history } = this.state;\r\n        //                 s.value = player;\r\n        //                 s.select();\r\n        //                 this.checkWin(s);\r\n        //                 let newHis = [];\r\n        //                 if (currentStep < history.length) {\r\n        //                     newHis = history.slice(0, currentStep)\r\n        //                 } else {\r\n        //                     newHis = [...history]\r\n        //                 }\r\n        //                 this.setState({\r\n        //                     history: [...newHis, {\r\n        //                         location: square.key,\r\n        //                         player\r\n        //                     }],\r\n        //                     player: player === 1 ? 2 : 1,\r\n        //                     currentStep: currentStep + 1,\r\n        //                 });\r\n        //                 // console.log('player', this.state.player)\r\n        //             }\r\n        //         }\r\n        //         return s;\r\n        //     })\r\n        //     return squareRow;\r\n        // })\r\n\r\n        // this.setState({ boardSquares: squaresBoard });\r\n        // eslint-disable-next-line react/destructuring-assignment\r\n        this.props.selectedSquare(square);\r\n    }\r\n\r\n    backToStep = (step) => {\r\n        // const newBoardHistory = this.getBlankBoard();\r\n        // const { history } = this.state;\r\n        // for (let i = 0; i < step; i += 1) {\r\n        //     const lo = history[i].location;\r\n        //     newBoardHistory.map(boardRow => {\r\n        //         boardRow.map(square => {\r\n        //             const newSquare = square;\r\n        //             newSquare.isSelected = false;\r\n        //             if (newSquare.key === lo) {\r\n        //                 newSquare.value = history[i].player;\r\n        //                 newSquare.select();\r\n        //             }\r\n        //             return newSquare;\r\n        //         })\r\n        //         return boardRow;\r\n        //     })\r\n        // }\r\n        // // console.log(step);\r\n        // let player = 1;\r\n        // if (step !== 0) {\r\n        //     player = history[step - 1].player === 1 ? 2 : 1;\r\n        // }\r\n        // this.setState({\r\n        //     boardSquares: newBoardHistory,\r\n        //     player,\r\n        //     currentStep: step\r\n        // })\r\n        // eslint-disable-next-line react/destructuring-assignment\r\n        this.props.setStep(step);\r\n    }\r\n\r\n    // back = () => {\r\n    //     const { currentStep } = this.props;\r\n    //     if (currentStep > 0) {\r\n    //         this.backToStep(currentStep - 1);\r\n    //     }\r\n    // }\r\n\r\n    // forward = () => {\r\n    //     const { currentStep, history } = this.props;\r\n    //     if (currentStep < history.length) {\r\n    //         this.backToStep(currentStep + 1);\r\n    //     }\r\n    // }\r\n\r\n    render = () => {\r\n        const { arrangeAsend } = this.state;\r\n        const { boardSquares, player, win, history, currentStep } = this.props;\r\n        return (\r\n            <div className=\"game\">\r\n                {win ? <div>\r\n                    <h1>Congratulation Player {player === 1 ? 'O' : 'X'}</h1>\r\n                </div>\r\n                    : null\r\n                }\r\n                <button type=\"button\" onClick={this.init}>Play again</button>\r\n                <SquareContext.Provider value={\r\n                    {\r\n                        value: 1,\r\n                        onSquareClick: (square) => this.handleClick(square)\r\n                    }\r\n                }>\r\n                    <Board squares={boardSquares}\r\n                        win={win}\r\n                        player={player}\r\n                    />\r\n                </SquareContext.Provider>\r\n                {\r\n                    win === false ?\r\n                        <ol>\r\n                            <HistoryBoard current={currentStep} step={history.length} arrange={arrangeAsend} backToStep={(step) => this.backToStep(step)} />\r\n                        </ol> : null\r\n                }\r\n                {/* <ol>\r\n                    <li>\r\n                        <button type=\"button\" onClick={this.back}> Step back </button>\r\n                        <button type=\"button\" onClick={this.forward}> Step forward </button>\r\n                    </li>\r\n                </ol> */}\r\n                <ol>\r\n                    <li>\r\n                        <button type=\"button\" onClick={() => this.setState({ arrangeAsend: true })}> Ascending </button>\r\n                        <button type=\"button\" onClick={() => this.setState({ arrangeAsend: false })}> Descending </button>\r\n                    </li>\r\n                </ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        boardSquares: state.grc.boardSquares,\r\n        player: state.grc.player,\r\n        win: state.grc.win,\r\n        history: state.grc.history,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        initGameRefactor: () => dispatch(actionCreators.initGame()),\r\n        selectedSquare: (square) => dispatch(actionCreators.sqaureSelected(square)),\r\n        setStep: (step) => dispatch(actionCreators.setStep(step)),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameCaro);","import * as ActionTypes from './ActionTypes';\r\n\r\n\r\nexport const sqaureSelected = (payLoadsData) => {\r\n    return {\r\n        type: ActionTypes.CHOSE_POSITION,\r\n        square: payLoadsData,\r\n    };\r\n};\r\n\r\nexport const initGame = (payLoadsdata) => {\r\n    return {\r\n        type: ActionTypes.INIT_GAME,\r\n        payLoads: payLoadsdata\r\n    };\r\n};\r\nexport const setStep = (data) => {\r\n    return {\r\n        type: ActionTypes.SET_STEP,\r\n        step:data\r\n    };\r\n};","export const CHECK_WIN = \"CHECKWIN\";\r\nexport const CHOSE_POSITION = \"CHOSEPOSITION\";\r\nexport const INIT_GAME = \"INIT\";\r\nexport const ADD_HISTORY = \"ADD_HISTORY\";\r\nexport const SET_STEP = \"SET_STEP\";","import React, { Component } from 'react';\r\n\r\nimport Layout from './hoc/Layout/Layout';\r\nimport GameCaro from './containers/GameCaro/GameCaro';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  hello = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <GameCaro />\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","class SquareValue {\r\n    value = 0;\r\n\r\n    key = 0;\r\n\r\n    i = 0;\r\n\r\n    j = 0;\r\n\r\n    isSelected=false;\r\n\r\n    constructor(value, key, i, j) {\r\n        this.value = value;\r\n        this.key = key;\r\n        this.i = i;\r\n        this.j = j;\r\n    }\r\n\r\n    select(){\r\n        this.isSelected=true;\r\n    }\r\n\r\n    equal = (orther) => {\r\n        if (orther.key === this.key) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isSameValue = (orther) => {\r\n        if (orther.value === this.value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    isComponentValue = (orther) => {\r\n        if (orther.value !== this.value && orther.value !== 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport default SquareValue;","\r\nclass Checker {\r\n    static check = (squareValue, squares) => {\r\n        if (this.checkSubDiagonal(squareValue, squares).length > 0) {\r\n            return this.checkSubDiagonal(squareValue, squares)\r\n        }\r\n        if (this.checkCol(squareValue, squares).length > 0) {\r\n            return this.checkCol(squareValue, squares)\r\n        }\r\n        if (this.checkRow(squareValue, squares).length > 0) {\r\n            return this.checkRow(squareValue, squares)\r\n        }\r\n        if (this.checkMainDiagonal(squareValue, squares).length > 0) {\r\n            return this.checkMainDiagonal(squareValue, squares)\r\n        }\r\n        return [];\r\n    }\r\n\r\n    static checkCol = (squareValue, squares) => {\r\n        // console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let arr = [];\r\n        while (x < 20) {\r\n            if (squareValue.isSameValue(squares[x][squareValue.j])) {\r\n                count+=1;\r\n                x+=1;\r\n                arr = [...arr, squares[x][squareValue.j]]\r\n            } else {\r\n                // console.log(squares[x][squareValue.j].value);\r\n                if (squares[x][squareValue.j].value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        while (x >= 0) {\r\n            const value = squares[x][squareValue.j];\r\n            if (squareValue.isSameValue(value)) {\r\n                count+=1;\r\n                x-=1;\r\n                arr = [...arr, value]\r\n            } else {\r\n                // console.log(squares[x][squareValue.j].value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // console.log('Count col', count);\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n\r\n    static checkRow = (squareValue, squares) => {\r\n        // console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.j + 1;\r\n        let arr = [];\r\n        while (x < 20) {\r\n\r\n            const value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count+=1;\r\n                x+=1;\r\n                arr = [...arr, value]\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        x = squareValue.j - 1;\r\n        while (x >= 0) {\r\n\r\n\r\n            const value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count+=1;\r\n                x-=1;\r\n                arr = [...arr, value]\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        // console.log('Count row', count);\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n\r\n    static checkMainDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j + 1;\r\n        let arr = [];\r\n        while (x < 20 && y < 20) {\r\n\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x+=1;\r\n                y+=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j - 1;\r\n        while (x >= 0 && y >= 0) {\r\n\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x-=1;\r\n                y-=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // console.log('Check Main Diagonal', count);\r\n\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n\r\n    static checkSubDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j - 1;\r\n        let arr = [];\r\n        while (x < 20 && y >= 0) {\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x+=1;\r\n                y-=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j + 1;\r\n        while (x >= 0 && y < 20) {\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x-=1;\r\n                y+=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // console.log('Check Sub Diagonal', count);\r\n        // console.log('twoHeadBlock', twoHeadBlock);\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n}\r\nexport default Checker;","import * as actionTypes from '../actions/ActionTypes';\r\nimport SquareValue from '../utility/squareObj';\r\nimport Checker from '../utility/gameChecker';\r\n\r\n\r\nconst getBlankBoard = () => {\r\n    const arr = new Array(20).fill(0);\r\n    for (let i = 0; i < arr.length; i += 1) {\r\n        arr[i] = new Array(20);\r\n        for (let j = 0; j < arr[i].length; j += 1) {\r\n            arr[i][j] = new SquareValue(0, i * 10 * 2 + j, i, j);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst initialState = {\r\n    boardSquares: getBlankBoard(),\r\n    player: 1,\r\n    win: false,\r\n    history: [],\r\n    currentStep: 0\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case actionTypes.ADD_HISTORY:\r\n            return {\r\n                ...state,\r\n                counter: state.counter - 1\r\n            }\r\n        case actionTypes.CHOSE_POSITION: {\r\n            const { boardSquares } = state;\r\n            let newState = { ...state };\r\n            const { square } = action;\r\n            const squaresBoard = boardSquares.map((squareRow) => {\r\n                squareRow.map(squareM => {\r\n                    const s = squareM;\r\n                    s.isSelected = false;\r\n                    if (squareM.equal(square)) {\r\n                        // console.log('map', squareM);\r\n                        if (s.value === 0) {\r\n                            const { player, currentStep, history } = state;\r\n                            s.value = player;\r\n                            s.select();\r\n                            //\r\n                            const result = Checker.check(square, boardSquares);\r\n\r\n                            if (result.length > 0) {\r\n                                const newBoard = boardSquares.map(sr1 => {\r\n                                    sr1.map(square1 => {\r\n                                        const sq = square1;\r\n                                        sq.isSelected = false;\r\n                                        result.forEach(r => {\r\n                                            if (sq.equal(r)) {\r\n                                                sq.select();\r\n                                            }\r\n                                        })\r\n                                        return sq;\r\n                                    })\r\n                                    return sr1;\r\n\r\n                                })\r\n                                newState = {\r\n                                    ...newState,\r\n                                    win: true,\r\n                                    boardSquares: newBoard\r\n                                }\r\n                            }\r\n\r\n                            //\r\n                            let newHis = [];\r\n                            if (currentStep < history.length) {\r\n                                newHis = history.slice(0, currentStep)\r\n                            } else {\r\n                                newHis = [...history]\r\n                            }\r\n                            newState = {\r\n                                ...newState,\r\n                                history: [...newHis, {\r\n                                    location: square.key,\r\n                                    player\r\n                                }],\r\n                                player: player === 1 ? 2 : 1,\r\n                                currentStep: currentStep + 1,\r\n                            }\r\n                        }\r\n                    }\r\n                    return s;\r\n                })\r\n                return squareRow;\r\n            })\r\n            newState = {\r\n                ...newState,\r\n                boardSquares: squaresBoard\r\n            }\r\n            return newState;\r\n        }\r\n\r\n        case actionTypes.INIT_GAME: {\r\n            const boardSquares = getBlankBoard();\r\n            return {\r\n                ...state,\r\n                boardSquares,\r\n                player: 1,\r\n                win: false,\r\n                history: []\r\n            }\r\n        }\r\n        case actionTypes.SET_STEP: {\r\n            // console.log('Set step');\r\n            const newBoardHistory = getBlankBoard();\r\n            const { history } = state;\r\n            for (let i = 0; i < action.step; i += 1) {\r\n                const lo = history[i].location;\r\n                newBoardHistory.map(boardRow => {\r\n                    boardRow.map(square => {\r\n                        const newSquare = square;\r\n                        newSquare.isSelected = false;\r\n                        if (newSquare.key === lo) {\r\n                            newSquare.value = history[i].player;\r\n                            newSquare.select();\r\n                        }\r\n                        return newSquare;\r\n                    })\r\n                    return boardRow;\r\n                })\r\n            }\r\n            // console.log(step);\r\n            let player = 1;\r\n            if (action.step !== 0) {\r\n                player = history[action.step - 1].player === 1 ? 2 : 1;\r\n            }\r\n            // this.setState({\r\n            //     boardSquares: newBoardHistory,\r\n            //     player,\r\n            //     currentStep: action.step\r\n            // })\r\n            return {\r\n                ...state,\r\n                boardSquares: newBoardHistory,\r\n                player,\r\n                currentStep: action.step\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport GameReducer from './reducers/GameReducers'\n\nconst rootReducer = combineReducers({\n    grc: GameReducer,\n});\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}